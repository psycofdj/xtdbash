#!bin/bash

export ENVLOADER_VARIABLES=""
export ENVLOADER_VERBOSE
export ENVLOADER_PROMPT_ENABLED=0

if [ "Darwin" == $(uname -s) ]; then
  export IS_DARWIN=1
fi

if [ -z "${ENVLOADER_VERBOSE}" ]; then
    ENVLOADER_VERBOSE=0
fi

if [ -z "${BASE_PATH}" ]; then
   export BASE_PATH=${PATH}
fi

if [ -z "${DOLLAR}" ]; then
   export DOLLAR='$'
fi

function __envloader_error() {
  local p_msg=$*;
  echo >&2 "$(tput setaf 1)envloader error$(tput sgr0): ${p_msg}"
}

function __envloader_verbose() {
  local p_msg=$*;

  if [ "${ENVLOADER_VERBOSE}" == "1" ]; then
      echo "$(tput setaf 3)envloader$(tput sgr0): ${p_msg}"
  fi
}

function __envloader_export_file() {
  local p_file=$1; shift

  jq -r "to_entries[] | \"export \(.key)=\(.value | tostring | tojson);export \(.key)_origin=\(input_filename | tojson)\"" ${p_file} 2>/dev/null || {
    __envloader_error "malformed json file ${p_file}, ignored"
  }
  # jq -r "to_entries[] | \"export \(.key)='\(.value | tostring)';export \(.key)_origin=\(input_filename | tojson)\"" ${p_file} 2>/dev/null || {
  #   __envloader_error "malformed json file ${p_file}, ignored"
  # }
}


function __envloader_save_vars() {
  local p_file=$1; shift
  local c_var

  for c_var in $(jq -r 'to_entries[] | "\(.key)"' < "${p_file}" 2>/dev/null ); do
    strlist_add ENVLOADER_VARIABLES "${c_var}"
  done
}

function __envloader_is_safe() {
  local p_file=$1; shift
  local l_mode=$(stat --printf "%A" $(realpath ${p_file}))
  local l_ow=${l_mode:1:9}

  if [ "${l_ow}" != "r--------" ]; then
      echo "$(tput setaf 3)envloader$(tput sgr0): ${p_file} (${l_ow}) is not safe to load"
      return 1
  fi

  __envloader_verbose ${p_file} is safe
  return 0
}

function envloader_verbose_on() {
  export ENVLOADER_VERBOSE="1"
}

function envloader_verbose_off() {
  export ENVLOADER_VERBOSE="0"
}

function envloader_edit() {
  local p_file=$1; shift

  if [ -z "${p_file}" ]; then
      p_file=".env.json"
  fi

  if [ ! -f "${p_file}" ]; then
      echo '{}' > "${p_file}"
      chmod 400 "${p_file}"
  fi


  local l_tmp=$(mktemp --suffix .json)
  local l_edit=${EDITOR}
  if [ -z "${l_edit}" ]; then
      l_edit="vi"
  fi

  cp ${p_file} ${l_tmp}
  chmod u+w ${p_file}
  ${l_edit} ${l_tmp}

  cp ${l_tmp} ${p_file}
  chmod u-w ${p_file}
  rm -f ${l_tmp}

  envloader_run
  envloader_list
}

function envloader_count() {
  local c_var
  local l_res=0
  for c_var in $(echo "${ENVLOADER_VARIABLES}" | tr ';' '\n' | sort -u); do
    l_res=$((l_res + 1))
  done
  echo "${l_res}"
}

function __envloader_update_prompt_label() {
  test ${ENVLOADER_PROMPT_ENABLED} -eq 0 && {
    return 0
  }

  local l_count=$(envloader_count)
  if [ ${l_count} -ne 0 ]; then
      promptcmd_add_labels "env⌈${l_count}⌉|lightmagenta"
  fi
}

function envloader_enable_prompt() {
  ENVLOADER_PROMPT_ENABLED=1
  promptcmd_push "__envloader_update_prompt_label"
}

function envloader_disable_prompt() {
  ENVLOADER_PROMPT_ENABLED=0
}

function envloader_list() {
  __envloader_verbose "listing all variables..."
  local c_var

  for c_var in $(echo "${ENVLOADER_VARIABLES}" | tr ';' '\n' | sort -u); do
    local l_originName="${c_var}_origin"
    local l_origin="${!l_originName}"
    local l_val="${!c_var}"
    printf -- "-> $(tput setaf 1)%10s$(tput sgr0) = $(tput setaf 3)%s$(tput sgr0) ($(tput bold)%s$(tput sgr0))\n" "${c_var}" "${l_val}" "${l_origin}"
  done
}

function envloader_unload() {
  __envloader_verbose "unloading all variables variables..."
  local c_var

  for c_var in $(echo "${ENVLOADER_VARIABLES}" | tr ';' ' '); do
    if [ "${c_var}" != "PATH" ]; then
        __envloader_verbose "-> unset ${c_var}"
        local l_name="${c_var}_origin"
        unset "${c_var}"
        unset "${l_name}"
    else
      __envloader_verbose "-> reseting PATH to ${BASE_PATH}"
      export PATH=${BASE_PATH}
    fi
  done
  ENVLOADER_VARIABLES=""
}

function envloader_run() {
  local c_path=$(pwd)
  local l_vars=""

  tty -s || return

  envloader_unload
  while [ "${c_path}" != "/" ]; do
    local l_file="${c_path}/.env.json"
    __envloader_verbose considering ${l_file}
    c_path=$(dirname ${c_path})
    test -f "${l_file}" || continue
    __envloader_is_safe "${l_file}" || continue

    local l_tmp="$(__envloader_export_file ${l_file} | tr '\n' ';')"
    l_vars="${l_tmp}${l_vars}"
    __envloader_save_vars "${l_file}"
  done

  if [ ! -z "${l_vars}" ]; then
      __envloader_verbose "running command : ${l_vars}"
      eval "${l_vars}";
  fi
}

cdevent_push envloader_run
